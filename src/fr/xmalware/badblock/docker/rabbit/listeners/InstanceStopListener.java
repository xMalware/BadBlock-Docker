package fr.xmalware.badblock.docker.rabbit.listeners;

import java.util.List;
import java.util.Optional;

import fr.badblock.api.common.tech.rabbitmq.RabbitService;
import fr.badblock.api.common.tech.rabbitmq.listener.RabbitListener;
import fr.badblock.api.common.tech.rabbitmq.listener.RabbitListenerType;
import fr.xmalware.badblock.docker.dockers.LocalDocker;
import fr.xmalware.badblock.docker.dockers.LocalDockerData;
import fr.xmalware.badblock.docker.dockers.LocalDockerScreenOverseer;
import fr.xmalware.badblock.docker.instances.InstanceEntity;
import fr.xmalware.badblock.docker.statics.StaticServer;

public class InstanceStopListener extends RabbitListener
{

	public InstanceStopListener(RabbitService rabbitService, String name, RabbitListenerType type, boolean debug)
	{
		super(rabbitService, name, type, debug);
	}

	@Override
	public void onPacketReceiving(String body)
	{
		LocalDocker localDocker = LocalDocker.getInstance();
		LocalDockerData localDockerData = localDocker.getData();

		String[] splitter = body.split("_");
		String worldSystem = splitter[0];

		if (!localDockerData.getEntities().containsKey(worldSystem))
		{
			return;
		}

		List<InstanceEntity> entities = localDockerData.getEntities().get(worldSystem);

		Optional<InstanceEntity> entity = entities.parallelStream().filter(ent -> ent != null && ent.getName() != null && ent.getName().equals(body)).findFirst();

		if (!entity.isPresent())
		{	
			if (StaticServer.servers.containsKey(worldSystem) && StaticServer.servers.get(worldSystem).parallelStream().filter(p -> p.getKeepAlive().getName().equals(body)).count() > 0)
			{
				StaticServer.servers.get(worldSystem).parallelStream().filter(p -> p.getKeepAlive().getName().equals(body)).forEach(p -> p.setLastKeepAlive(0));
			}
			return;
		}

		InstanceEntity instanceEntity = entity.get();
		instanceEntity.remove();
	}

}

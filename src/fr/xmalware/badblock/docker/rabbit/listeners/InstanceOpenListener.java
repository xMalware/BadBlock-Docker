package fr.xmalware.badblock.docker.rabbit.listeners;

import java.util.Map;

import fr.badblock.api.common.minecraft.DockerRabbitQueues;
import fr.badblock.api.common.tech.rabbitmq.RabbitService;
import fr.badblock.api.common.tech.rabbitmq.listener.RabbitListener;
import fr.badblock.api.common.tech.rabbitmq.listener.RabbitListenerType;
import fr.badblock.api.common.tech.rabbitmq.packet.RabbitPacket;
import fr.badblock.api.common.tech.rabbitmq.packet.RabbitPacketEncoder;
import fr.badblock.api.common.tech.rabbitmq.packet.RabbitPacketMessage;
import fr.badblock.api.common.tech.rabbitmq.packet.RabbitPacketType;
import fr.badblock.api.common.utils.logs.LogType;
import fr.xmalware.badblock.docker.dockers.Docker;
import fr.xmalware.badblock.docker.dockers.LocalDocker;
import fr.xmalware.badblock.docker.instances.InstanceSystem;
import fr.xmalware.badblock.docker.instances.WorldSystem;
import fr.xmalware.badblock.docker.openers.OpenUtils;
import fr.xmalware.badblock.docker.rabbit.RabbitLogger;
import fr.xmalware.badblock.docker.rabbit.objects.InstanceOpenRequest;

public class InstanceOpenListener extends RabbitListener
{

	public InstanceOpenListener(RabbitService rabbitService, String name, RabbitListenerType type, boolean debug)
	{
		super(rabbitService, name, type, debug);
	}

	@Override
	public void onPacketReceiving(String body)
	{
		InstanceOpenRequest request = Docker.getInstance().getGson().fromJson(body, InstanceOpenRequest.class);
		
		if (request == null)
		{
			return;
		}
		
		Map<String, InstanceSystem> map = LocalDocker.getConfig().getSystems();

		WorldSystem system = null;
		
		for (InstanceSystem instanceSystem : map.values())
		{
			for (WorldSystem worldSystem : instanceSystem.getWorlds())
			{
				if (!worldSystem.getName().equals(request.getWorldSystemName()))
				{
					system = worldSystem;
					break;
				}
			}
		}
		
		if (system == null)
		{
			RabbitLogger.sendDockerLog(LogType.WARNING, "A remote opening was requested for the world system '" + request.getWorldSystemName() + "' but it was not found.");
			return;
		}

		RabbitLogger.sendDockerLog(LogType.INFO, "A remote opening was requested for the world system '" + request.getWorldSystemName() + "'.");
		RabbitLogger.sendDockerLog(LogType.INFO, "Request sent by: " + request.getOwner() + " | Target: " + request.getTarget());
		
		if (request.getTarget() == null || request.getTarget().isEmpty())
		{
			String server = OpenUtils.getMostAffordableServer(system);
			if (server == null)
			{
				RabbitLogger.sendDockerLog(LogType.WARNING, "Unable to send off the remote opening request. No server found.");
				return;
			}
			
			request.setTarget(server);
			body = Docker.getInstance().getGson().toJson(request);
			RabbitPacketMessage rabbitPacketMessage = new RabbitPacketMessage(-1, body);
			RabbitPacket rabbitPacket = new RabbitPacket(rabbitPacketMessage, DockerRabbitQueues.INSTANCE_OPEN.getQueue()
					+ "_" + request.getTarget().toLowerCase(),
					false, RabbitPacketEncoder.UTF8, RabbitPacketType.PUBLISHER);
			Docker.getInstance().getRabbit().sendPacket(rabbitPacket);
		}
	}

}

package fr.xmalware.badblock.docker.rabbit.listeners;

import java.util.Map;

import fr.badblock.api.common.tech.rabbitmq.RabbitService;
import fr.badblock.api.common.tech.rabbitmq.listener.RabbitListener;
import fr.badblock.api.common.tech.rabbitmq.listener.RabbitListenerType;
import fr.badblock.api.common.utils.logs.LogType;
import fr.xmalware.badblock.docker.dockers.Docker;
import fr.xmalware.badblock.docker.dockers.LocalDocker;
import fr.xmalware.badblock.docker.instances.InstanceSystem;
import fr.xmalware.badblock.docker.instances.WorldSystem;
import fr.xmalware.badblock.docker.openers.LocalOpener;
import fr.xmalware.badblock.docker.rabbit.RabbitLogger;
import fr.xmalware.badblock.docker.rabbit.objects.InstanceOpenRequest;

public class InstanceLocalOpenListener extends RabbitListener
{

	public InstanceLocalOpenListener(RabbitService rabbitService, String name, RabbitListenerType type, boolean debug)
	{
		super(rabbitService, name, type, debug);
	}

	@Override
	public void onPacketReceiving(String body)
	{
		InstanceOpenRequest request = Docker.getInstance().getGson().fromJson(body, InstanceOpenRequest.class);
		
		if (request == null)
		{
			return;
		}
		
		Map<String, InstanceSystem> map = LocalDocker.getConfig().getSystems();

		WorldSystem system = null;
		
		for (InstanceSystem instanceSystem : map.values())
		{
			for (WorldSystem worldSystem : instanceSystem.getWorlds())
			{
				if (!worldSystem.getName().equals(request.getWorldSystemName()))
				{
					system = worldSystem;
					break;
				}
			}
		}
		
		if (system == null)
		{
			RabbitLogger.sendDockerLog(LogType.WARNING, "A remote opening was requested for the world system '" + request.getWorldSystemName() + "' but it was not found.");
			return;
		}

		if (request.getTarget() == null || !request.getTarget().equals(Docker.getInstance().getIdCard().getFullId()))
		{
			RabbitLogger.sendDockerLog(LogType.WARNING, "A remote opening was requested for the world system '" + request.getWorldSystemName() + "' but the request doesn't match the target.");
			return;
		}
		
		RabbitLogger.sendDockerLog(LogType.INFO, "A remote opening was requested for the world system '" + request.getWorldSystemName() + "'.");
		RabbitLogger.sendDockerLog(LogType.INFO, "Request sent by: " + request.getOwner() + " | Target: " + request.getTarget());
		
		LocalOpener.open(system, request.getOwner(), true);
	}

}

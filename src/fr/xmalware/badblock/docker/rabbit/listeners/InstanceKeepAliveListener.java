package fr.xmalware.badblock.docker.rabbit.listeners;

import java.util.List;
import java.util.Optional;

import fr.badblock.api.common.minecraft.InstanceKeepAlive;
import fr.badblock.api.common.tech.rabbitmq.RabbitService;
import fr.badblock.api.common.tech.rabbitmq.listener.RabbitListener;
import fr.badblock.api.common.tech.rabbitmq.listener.RabbitListenerType;
import fr.xmalware.badblock.docker.dockers.Docker;
import fr.xmalware.badblock.docker.dockers.LocalDocker;
import fr.xmalware.badblock.docker.dockers.LocalDockerData;
import fr.xmalware.badblock.docker.instances.InstanceEntity;

public class InstanceKeepAliveListener extends RabbitListener
{

	public InstanceKeepAliveListener(RabbitService rabbitService, String name, RabbitListenerType type, boolean debug)
	{
		super(rabbitService, name, type, debug);
	}

	@Override
	public void onPacketReceiving(String body)
	{
		InstanceKeepAlive keepAlive = Docker.getInstance().getGson().fromJson(body, InstanceKeepAlive.class);
		
		if (keepAlive == null)
		{
			return;
		}
		
		LocalDocker localDocker = LocalDocker.getInstance();
		LocalDockerData localDockerData = localDocker.getData();
		
		String[] splitter = keepAlive.getName().split("_");
		String worldSystem = splitter[0];
		
		if (!localDockerData.getEntities().containsKey(worldSystem))
		{
			return;
		}
		
		List<InstanceEntity> entities = localDockerData.getEntities().get(worldSystem);
		
		Optional<InstanceEntity> entity = entities.parallelStream().filter(ent -> ent.getName().equals(keepAlive.getName())).findFirst();
		
		if (!entity.isPresent())
		{
			return;
		}
		
		InstanceEntity instanceEntity = entity.get();
		instanceEntity.keepAlive(keepAlive);
	}

}

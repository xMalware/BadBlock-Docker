package fr.xmalware.badblock.docker.config;

import java.util.HashMap;
import java.util.Map;

import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;

import fr.badblock.api.common.utils.data.Callback;
import fr.xmalware.badblock.docker.dockers.Docker;
import fr.xmalware.badblock.docker.instances.InstanceSystem;
import lombok.Getter;

@Getter
public class InstanceConfiguration extends Thread
{

	private Map<String, InstanceSystem>	systems;
	private boolean									firstDone;
	
	public Callback<Boolean>					callback;
	
	public InstanceConfiguration()
	{
		super("Docker/InstanceConfig/Update");
		this.start();
	}
	
	public void work()
	{
		Docker docker = Docker.getInstance();
		DB db = docker.getMongo().db();
		DBCollection dbCollection = db.getCollection("docker_" + docker.getConfig().getCluster().toLowerCase());
		
		Map<String, InstanceSystem> tempSystems = new HashMap<>();
		DBCursor cursor = dbCollection.find(new BasicDBObject());
		
		while (cursor.hasNext())
		{
			BasicDBObject data = (BasicDBObject) cursor.next();
			InstanceSystem instanceSystem = new InstanceSystem(data);
			tempSystems.put(instanceSystem.getName(), instanceSystem);
		}
		
		systems = tempSystems;
		
		if (!firstDone)
		{
			firstDone = true;
			callback.done(true, null);
		}
	}
	
	@Override
	public void run()
	{
		while (true)
		{
			work();
			
			try
			{
				Thread.sleep(15_000L);
			}
			catch (InterruptedException e)
			{
				e.printStackTrace();
			}
			
			System.gc();

			try
			{
				Thread.sleep(15_000L);
			}
			catch (InterruptedException e)
			{
				e.printStackTrace();
			}
		}
	}
	
}
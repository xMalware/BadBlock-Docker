package fr.xmalware.badblock.docker.utils;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

public class BadblockDatabase {

	private static BadblockDatabase instance;

	// Instance
	private Connection connection;
	private boolean isConnected;

	public static BadblockDatabase getInstance() {
		if (instance == null)
			instance = new BadblockDatabase();
		return instance;
	}

	/**
	 * Connexion � la base de donn�es
	 * 
	 * @param hostName
	 * @param port
	 * @param username
	 * @param password
	 * @param database
	 */
	public void connect(String hostName, int port, String username, String password, String database) {
		try {
			Class.forName("com.mysql.jdbc.Driver");
			DriverManager.setLoginTimeout(10);
			connection = DriverManager.getConnection("jdbc:mysql://" + hostName + ":" + port + "/"
					+ database + "?autoReconnect=true&connectTimeout=5000", username, password);
			isConnected = true;
			System.out.println("Connected");
		} catch (Exception e) {
			e.printStackTrace();
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e1) {
				e1.printStackTrace();
			}
		}
		
		new Thread() {
			@Override
			public void run() {
				while (true) {
					try {
						if (isConnectionEtablished()) {
							try {
								Thread.sleep(1000);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
							continue;
						}
					} catch (SQLException e1) {
						e1.printStackTrace();
					}
					try {
						Class.forName("com.mysql.jdbc.Driver");
						DriverManager.setLoginTimeout(10);
						connection = DriverManager.getConnection("jdbc:mysql://" + hostName + ":" + port + "/"
								+ database + "?autoReconnect=true&connectTimeout=5000", username, password);
						isConnected = true;
						System.out.println("Connected");
					} catch (Exception e) {
						e.printStackTrace();
						try {
							Thread.sleep(1000);
						} catch (InterruptedException e1) {
							e1.printStackTrace();
						}
					}
				}
			}
		}.start();
	}

	/**
	 * V�rifier si la personne est connect�e � la base de donn�e. Attention:
	 * m�thode d�capr�c�e car elle ne permet pas de savoir si la personne est
	 * r�ellement connect�e encore.
	 * 
	 * @deprecated
	 * @return
	 */
	@Deprecated
	public boolean isConnected() {
		return this.isConnected;
	}

	/**
	 * V�rifier si la connexion est active.
	 * 
	 * @return
	 * @throws SQLException
	 */
	public boolean isConnectionEtablished() throws SQLException {
		return this.connection != null && !this.connection.isClosed();
	}

	/**
	 * Cr�er un statement reli�e � la connexion de la base de donn�e
	 * 
	 * @return
	 * @throws SQLException
	 */
	public Statement createStatement() throws SQLException {
		Statement statement = connection.createStatement();
		statement.setQueryTimeout(10);
		return statement;
	}

	/**
	 * Terminer la connexion, cela terminera la liaison avec la base de donn�es
	 * ainsi que les statements et requ�tes en cours sur la session.
	 * 
	 * @throws SQLException
	 */
	public void closeConnection() throws SQLException {
		connection.close();
	}

	/**
	 * R�cup�rer la connexion active
	 * 
	 * @return
	 */
	public Connection getConnection() {
		return this.connection;
	}

	/**
	 * 
	 * @author Aurelian User
	 *
	 */
	@SuppressWarnings("serial")
	private class DatabaseIsNotConnectedException extends RuntimeException {
		public DatabaseIsNotConnectedException() {
			super("Operation cannot be executed because the database was not connected.");
		}
	}

}

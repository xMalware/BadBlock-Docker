package fr.xmalware.badblock.docker.openers;

import java.util.ArrayList;
import java.util.List;

import fr.xmalware.badblock.docker.config.OpenConfiguration;
import fr.xmalware.badblock.docker.dockers.Docker;
import fr.xmalware.badblock.docker.dockers.LocalDocker;
import fr.xmalware.badblock.docker.dockers.LocalDockerData;
import fr.xmalware.badblock.docker.instances.InstanceEntity;
import fr.xmalware.badblock.docker.instances.WorldSystem;
import fr.xmalware.badblock.docker.rabbit.objects.KeepAlive;
import fr.xmalware.badblock.docker.utils.FinderUtils;
import fr.xmalware.badblock.docker.utils.SocketUtils;

public class LocalOpener
{

	public static OpenStatusTest open(WorldSystem worldSystem, String owner, boolean force, String hostId)
	{
		LocalDocker localDocker = LocalDocker.getInstance();
		KeepAlive keepAlive = localDocker.getKeepAlive();
		OpenConfiguration openConfig = keepAlive.getOpen();
		String hoster = keepAlive.getIdCard().getFullId();
		
		OpenStatusTest status = OpenStatusTest.ALLOWED;
		
		if (!force)
		{
			status = OpenUtils.isOpenable(keepAlive, worldSystem, force);
		}
		
		if (!status.equals(OpenStatusTest.ALLOWED))
		{
			return status;
		}
		
		int port = SocketUtils.findFreePort(openConfig.getMinPortRange(), openConfig.getMaxPortRange());
		if (port < 1)
		{
			return OpenStatusTest.NO_PORT_AVAILABLE;
		}
		
		int id = FinderUtils.findFirstAvailableNumber(worldSystem.getInstances());
		
		if (id < 1)
		{
			return OpenStatusTest.MAX_INSTANCES_REACHED;
		}
		
		long releaseMargin = System.currentTimeMillis() + openConfig.getReleaseMargin();
		InstanceEntity instanceEntity = new InstanceEntity(worldSystem, owner, hoster, id, openConfig.getIp(), port, releaseMargin, hostId);
		
		List<InstanceEntity> instanceEntities = null;
		LocalDockerData data = localDocker.getData();
		
		if (!data.getEntities().containsKey(worldSystem.getName()))
		{
			instanceEntities = new ArrayList<>();
		}
		else
		{
			instanceEntities = data.getEntities().get(worldSystem.getName());
		}
		
		instanceEntities.add(instanceEntity);
		data.getEntities().put(worldSystem.getName(), instanceEntities);
		
		data.setLastOpen(System.currentTimeMillis());
		LocalDocker.getInstance().keepAlive(Docker.getInstance());
		
		instanceEntity.make();
		
		return status;
	}
	
}

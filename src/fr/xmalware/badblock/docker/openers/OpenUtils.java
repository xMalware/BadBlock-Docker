package fr.xmalware.badblock.docker.openers;

import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;

import fr.xmalware.badblock.docker.config.PowerConfiguration;
import fr.xmalware.badblock.docker.dockers.Docker;
import fr.xmalware.badblock.docker.dockers.LocalDockerData;
import fr.xmalware.badblock.docker.instances.WorldSystem;
import fr.xmalware.badblock.docker.personaldata.ServerStatus;
import fr.xmalware.badblock.docker.rabbit.objects.KeepAlive;

public class OpenUtils
{

	public static String getMostAffordableServer(WorldSystem worldSystem)
	{
		Collection<KeepAlive> servers = Docker.getInstance().getNet().dockers.values();

		// Eliminate servers
		Iterator<KeepAlive> iterator = servers.iterator();
		while (iterator.hasNext())
		{
			KeepAlive server = iterator.next();
			if (isOpenable(server, worldSystem).equals(OpenStatusTest.ALLOWED))
			{
				continue;
			}
			iterator.remove();
		}
		
		if (servers.isEmpty())
		{
			return null;
		}
		
		KeepAlive powerlessServer = null;
		
		for (KeepAlive remainingServer : servers)
		{
			if (powerlessServer == null || powerlessServer.getStatus().getCurrentCpu() > remainingServer.getStatus().getCurrentCpu())
			{
				powerlessServer = remainingServer;
			}
		}
		
		if (powerlessServer == null)
		{
			return null;
		}
		
		return powerlessServer.getIdCard().getFullId();
	}

	public static OpenStatusTest isOpenable(KeepAlive keepAlive, WorldSystem worldSystem)
	{
		assert keepAlive != null;
		assert worldSystem != null;

		LocalDockerData docker = keepAlive.getData();
		PowerConfiguration power = keepAlive.getPower();
		ServerStatus status = keepAlive.getStatus();

		long time = System.currentTimeMillis();
		long lastOpen = time - docker.getLastOpen();

		if (lastOpen < power.getOpenDelay())
		{
			return OpenStatusTest.POWER_LIMIT_REACHED;
		}

		if (worldSystem.getMaxInstances() == 0)
		{
			return OpenStatusTest.MAX_INSTANCES_REACHED;
		}

		long[] memories = {power.getMemoryOffset(), worldSystem.getMemory()};
		long neededMemory = Arrays.stream(memories).sum();

		if (status.getFreeMemory() <= neededMemory)
		{
			return OpenStatusTest.NOT_ENOUGH_MEMORY;
		}

		double availablePower = 1 - keepAlive.getStatus().getCurrentCpu();
		if (availablePower < power.getPowerOffset())
		{
			return OpenStatusTest.NOT_ENOUGH_FREE_POWER;
		}

		if (worldSystem.getMaxInstances() > 0 && worldSystem.getInstances().size() > worldSystem.getMaxInstances())
		{
			return OpenStatusTest.MAX_INSTANCES_REACHED;
		}

		return OpenStatusTest.ALLOWED;
	}

}
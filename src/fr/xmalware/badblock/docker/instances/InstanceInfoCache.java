package fr.xmalware.badblock.docker.instances;

import java.io.File;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import com.google.gson.reflect.TypeToken;

import fr.badblock.api.common.utils.general.FileUtils;
import fr.xmalware.badblock.docker.cipher.AdvancedEncryptionStandard;
import fr.xmalware.badblock.docker.dockers.Docker;

public class InstanceInfoCache
{

	private static File file													= new File("entities.dat");
	private static AdvancedEncryptionStandard aes	= new AdvancedEncryptionStandard("f?~3>uTM%xcw%}*@");
	public static final Type collectionType					= new TypeToken<TreeMap<String, List<InstanceEntity>>>() {}.getType();
	
	public static void save(Map<String, List<InstanceEntity>> entities) throws Exception
	{
		String data = Docker.getInstance().getGsonExpose().toJson(entities);
		data = aes.encrypt(data);
		
		FileUtils.writeFile(file, data);
	}
	
	public static Map<String, List<InstanceEntity>> fetch() throws Exception
	{
		if (!file.exists())
		{
			return null;
		}

		String data = FileUtils.readFile(file);
		
		if (data.isEmpty())
		{
			return null;
		}
		
		data = aes.decrypt(data);
		
		return Docker.getInstance().getGsonExpose().fromJson(data, collectionType);
	}
	
}

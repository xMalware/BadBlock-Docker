package fr.xmalware.badblock.docker.instances;

import java.io.File;

import com.google.gson.annotations.Expose;

import fr.badblock.api.common.minecraft.GameState;
import fr.badblock.api.common.minecraft.InstanceKeepAlive;
import fr.xmalware.badblock.docker.openers.ContainerMaker;
import fr.xmalware.badblock.docker.openers.OpenState;
import lombok.Getter;
import lombok.Setter;

@Getter
public class InstanceEntity
{

	@Setter
	private WorldSystem		system;

	@Expose
	private String					owner;
	@Expose
	private String					hoster;
	@Expose
	private int						id;
	@Expose
	private String					ip;
	@Expose
	private int							port;

	@Expose
	private long						lastKeepAlive;
	@Expose
	private long						launchTime;
	@Expose
	private long						maxOpenAllowedTime;
	@Expose
	private OpenState				state;

	@Setter
	@Expose
	private transient int			players;
	@Expose
	private GameState				gameState;

	@Expose
	private boolean				externalReachState;
	@Expose
	private boolean				externalRemoved;

	public InstanceEntity(WorldSystem system, String owner, String hoster, int id, String ip, int port, long maxOpenAllowedTime)
	{
		this.system = system;
		this.owner = owner;
		this.hoster = hoster;
		this.id = id;
		this.ip = ip;
		this.port = port;

		this.lastKeepAlive = -1;
		this.maxOpenAllowedTime = maxOpenAllowedTime;
		this.launchTime = System.currentTimeMillis();
		this.state = OpenState.BOOTING;
	}
	
	public boolean isConsidered(WorldSystem worldSystem)
	{
		if (isBooting())
		{
			return true;
		}
		
		return !shouldBeRemoved() && GameState.WAITING.equals(this.getGameState()) && !isFull(worldSystem);
	}

	public boolean isFull(WorldSystem worldSystem)
	{
		return getPlayers() >= worldSystem.getSlots();
	}

	public boolean canHandle(WorldSystem worldSystem, int playersToDispatch)
	{
		return getPlayers() + playersToDispatch <= worldSystem.getSlots();
	}

	public boolean isBooting()
	{
		return this.state.equals(OpenState.BOOTING) && this.maxOpenAllowedTime > System.currentTimeMillis();
	}

	public String getLocalPath()
	{
		return "servers" + File.separatorChar + getName();
	}

	public boolean shouldBeRemoved()
	{
		if (isExternalRemoved())
		{
			return true;
		}

		if (state.equals(OpenState.REMOVED))
		{
			return true;
		}

		if (!isBooting())
		{
			if (!state.equals(OpenState.RUNNING))
			{
				return true;
			}

			if (lastKeepAlive < System.currentTimeMillis())
			{
				return true;
			}
		}

		return false;
	}

	public String getName()
	{
		return system.getName() + "_" + id;
	}

	public void make()
	{
		new ContainerMaker(this);
	}

	public void remove()
	{
		externalRemoved = true;
		this.state = OpenState.REMOVED;
	}

	public void keepAlive(InstanceKeepAlive keepAlive)
	{
		if (externalRemoved)
		{
			return;
		}

		this.gameState = keepAlive.getGameState();
		this.players = keepAlive.getPlayers();
		this.lastKeepAlive = System.currentTimeMillis() + 30_000L;
		this.externalReachState = keepAlive.isJoinable();
		this.state = OpenState.RUNNING;
	}

}
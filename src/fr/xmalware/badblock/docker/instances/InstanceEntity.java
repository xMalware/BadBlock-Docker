package fr.xmalware.badblock.docker.instances;

import java.io.File;

import org.bson.types.ObjectId;

import com.google.gson.annotations.Expose;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;

import fr.badblock.api.common.minecraft.BungeePlayerRequest;
import fr.badblock.api.common.minecraft.GameState;
import fr.badblock.api.common.minecraft.InstanceKeepAlive;
import fr.badblock.api.common.tech.mongodb.MongoService;
import fr.badblock.api.common.tech.rabbitmq.packet.RabbitPacket;
import fr.badblock.api.common.tech.rabbitmq.packet.RabbitPacketEncoder;
import fr.badblock.api.common.tech.rabbitmq.packet.RabbitPacketMessage;
import fr.badblock.api.common.tech.rabbitmq.packet.RabbitPacketType;
import fr.badblock.api.common.utils.general.MathUtils;
import fr.badblock.api.common.utils.logs.Log;
import fr.badblock.api.common.utils.logs.LogType;
import fr.xmalware.badblock.docker.dockers.Docker;
import fr.xmalware.badblock.docker.openers.ContainerMaker;
import fr.xmalware.badblock.docker.openers.OpenState;
import lombok.Getter;
import lombok.Setter;

@Getter
public class InstanceEntity
{

	@Setter
	private WorldSystem		system;

	@Expose
	private String					owner;
	@Expose
	private String					hoster;
	@Expose
	private int						id;
	@Expose
	private String					ip;
	@Expose
	private int							port;

	@Expose
	private long						lastKeepAlive;
	@Expose
	private long						launchTime;
	@Expose
	private long						maxOpenAllowedTime;
	@Expose
	private OpenState				state;

	@Setter
	@Expose
	private transient int			players;
	@Expose
	private GameState				gameState;

	@Expose
	private boolean				externalReachState;
	@Expose
	private boolean				externalRemoved;

	@Expose
	private String						hostId;

	public InstanceEntity(WorldSystem system, String owner, String hoster, int id, String ip, int port, long maxOpenAllowedTime, String hostId)
	{
		this.system = system;
		this.owner = owner;
		this.hoster = hoster;
		this.id = id;
		this.ip = ip;
		this.port = port;
		this.hostId = hostId;

		this.lastKeepAlive = -1;
		this.maxOpenAllowedTime = maxOpenAllowedTime;
		this.launchTime = System.currentTimeMillis();
		this.state = OpenState.BOOTING;
	}

	public boolean isConsidered(WorldSystem worldSystem)
	{
		if (isBooting())
		{
			return true;
		}

		return !shouldBeRemoved() && GameState.WAITING.equals(this.getGameState()) && !isFull(worldSystem);
	}

	public boolean isFull(WorldSystem worldSystem)
	{
		return getPlayers() >= worldSystem.getSlots();
	}

	public boolean canHandle(WorldSystem worldSystem, int playersToDispatch)
	{
		return getPlayers() + playersToDispatch <= worldSystem.getSlots();
	}

	public boolean isBooting()
	{
		return this.state.equals(OpenState.BOOTING) && this.maxOpenAllowedTime > System.currentTimeMillis();
	}

	public String getLocalPath()
	{
		return "servers" + File.separatorChar + getName();
	}

	public boolean shouldBeRemoved()
	{
		if (isExternalRemoved())
		{
			return true;
		}

		if (state.equals(OpenState.REMOVED))
		{
			return true;
		}

		if (!isBooting())
		{
			if (!state.equals(OpenState.RUNNING))
			{
				return true;
			}

			if (lastKeepAlive < System.currentTimeMillis())
			{
				return true;
			}
		}

		return false;
	}

	public String getName()
	{
		return system.getName() + "_" + id;
	}

	public void make()
	{
		new ContainerMaker(this);
	}

	public void remove()
	{
		externalRemoved = true;
		this.state = OpenState.REMOVED;
		hostRemove();
	}

	public void hostRemove()
	{
		if (getHostId() == null)
		{
			return;
		}

		MongoService mongo = Docker.getInstance().getMongo();
		DB db = mongo.getDb();
		DBCollection collection = db.getCollection("host_servers");
		BasicDBObject query = new BasicDBObject();
		query.put("_id", new ObjectId(getHostId()));
		DBCursor cursor = collection.find(query);

		if (!cursor.hasNext())
		{
			return;
		}

		DBObject object = cursor.next();
		object.removeField("_id"); // Unable to update with _id
		object.put("server_name", null);
		object.put("opened", false);
		collection.update(query, object);

		new BungeePlayerRequest(owner, "SEND_MESSAGE", "&f[&dHosts&f] &cServeur stoppé.").
		send(Docker.getInstance().getRabbit());
		hostId = null;
	}

	public void keepAlive(InstanceKeepAlive keepAlive)
	{
		if (externalRemoved)
		{
			return;
		}

		this.gameState = keepAlive.getGameState();
		this.players = keepAlive.getPlayers();

		if (this.lastKeepAlive == -1)
		{
			double startTime = System.currentTimeMillis() - getLaunchTime();
			startTime = MathUtils.round(startTime / 1000D, 2);

			OpenCalculator.getInstance().putData(getSystem(), startTime);

			Log.log(LogType.SUCCESS, "Entity " + getName() + " is pinging! (after " + startTime + "s)");
			hostStartedInfo();
		}

		this.lastKeepAlive = System.currentTimeMillis() + 30_000L;
		this.externalReachState = keepAlive.isJoinable();
		this.state = OpenState.RUNNING;
	}

	private void hostStartedInfo()
	{
		if (getHostId() == null)
		{
			return;
		}

		new BungeePlayerRequest(owner, "SEND_MESSAGE", "&f[&dHosts&f] &aServeur démarré. (Étape 2/2)").
		send(Docker.getInstance().getRabbit());
		
		new BungeePlayerRequest(owner, "SEND_JSON_MESSAGE", "{\"text\":\"&f[&dHosts&f] &b&n[Rejoindre]\",\"clickEvent\":{\"action\":\"run_command\", \"value\":\"/server " + getName() + "\"},\"hoverEvent\":{\"action\":\"show_text\", \"value\":\"&bCliquez ici pour rejoindre votre serveur\"}}").
		send(Docker.getInstance().getRabbit());
		
		RabbitPacketMessage rabbitPacketMessage = new RabbitPacketMessage(5000, "NOTE_PLING;" + owner);
		RabbitPacket rabbitPacket = new RabbitPacket(rabbitPacketMessage, "gameapi.sound", false,
				RabbitPacketEncoder.UTF8, RabbitPacketType.PUBLISHER);
		Docker.getInstance().getRabbit().sendPacket(rabbitPacket);
	}

	public void hostAssign()
	{
		if (getHostId() == null)
		{
			return;
		}

		MongoService mongo = Docker.getInstance().getMongo();
		DB db = mongo.getDb();
		DBCollection collection = db.getCollection("host_servers");
		BasicDBObject query = new BasicDBObject();
		query.put("_id", new ObjectId(getHostId()));
		DBCursor cursor = collection.find(query);

		if (!cursor.hasNext())
		{
			return;
		}

		DBObject object = cursor.next();
		object.removeField("_id"); // Unable to update with _id
		object.put("server_name", getName());
		collection.update(query, object);
	}

}
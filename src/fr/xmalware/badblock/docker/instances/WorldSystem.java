package fr.xmalware.badblock.docker.instances;

import java.util.ArrayList;
import java.util.List;

import com.mongodb.BasicDBObject;

import fr.xmalware.badblock.docker.dockers.Docker;
import fr.xmalware.badblock.docker.dockers.LocalDocker;
import fr.xmalware.badblock.docker.utils.StartMode;
import lombok.Getter;

@Getter
public class WorldSystem
{
	
	private InstanceSystem	instanceSystem;
	private String					name;
	private int							slots;
	private int							marginSlots;
	private long						memory;
	private StartMode				mode;
	private String					jarBase;
	private int							maxInstances;
	private String					usedWorld;
	private String					destinationWorld;
	private int							offsetServers;
	private boolean				randomMap;

	public WorldSystem(InstanceSystem instanceSystem, BasicDBObject dbObject)
	{
		this.instanceSystem = instanceSystem;
		this.name = dbObject.getString("name");
		this.slots = dbObject.getInt("slots");
		this.marginSlots = dbObject.getInt("marginSlots");
		this.memory = dbObject.getLong("memory");
		this.mode = StartMode.get(dbObject.getString("mode"));
		this.jarBase = dbObject.getString("jarBase");
		this.maxInstances = dbObject.getInt("maxInstances");
		this.usedWorld = dbObject.getString("usedWorld");
		this.destinationWorld = dbObject.getString("destinationWorld");
		this.offsetServers = dbObject.getInt("offsetServers");
		this.randomMap = dbObject.getBoolean("randomMap");
	}
	
	public List<InstanceEntity> getInstances()
	{
		List<InstanceEntity> instances = new ArrayList<>();
		Docker.getInstance().getNet().dockers.values().parallelStream().filter(keepAlives -> keepAlives.getData().getEntities().containsKey(name)).
		forEach(keepAlives -> instances.addAll(keepAlives.getData().getEntities().get(name)));
		return instances;
	}
	
}
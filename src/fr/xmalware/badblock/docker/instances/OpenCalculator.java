package fr.xmalware.badblock.docker.instances;

import java.util.HashMap;
import java.util.Map;
import java.util.OptionalDouble;
import java.util.Queue;

import com.google.common.collect.Queues;

import fr.badblock.api.common.utils.general.MathUtils;
import lombok.Getter;

public class OpenCalculator
{

	@Getter private static OpenCalculator instance = new OpenCalculator();
	
	private Map<String, Queue<Double>> lastOpen;
	
	public OpenCalculator()
	{
		this.lastOpen = new HashMap<>();
	}
	
	public double getEstimatedStart(WorldSystem worldSystem)
	{
		String worldSystemName = worldSystem.getName();
		
		if (!lastOpen.containsKey(worldSystemName))
		{
			return -1;
		}
		
		Queue<Double> queue = lastOpen.get(worldSystemName);
		OptionalDouble average = queue
	            .stream()
	            .mapToDouble(a -> a)
	            .average();
		
		return average.isPresent() ? MathUtils.round(average.getAsDouble(), 2) : -1;
	}
	
	public void putData(WorldSystem worldSystem, double openTime)
	{
		String worldSystemName = worldSystem.getName();
		
		Queue<Double> queue = lastOpen.containsKey(worldSystemName) ? lastOpen.get(worldSystemName) : Queues.newConcurrentLinkedQueue();
		
		if (queue.size() > 30)
		{
			queue.poll();
		}
		
		queue.add(openTime);
		
		lastOpen.put(worldSystemName, queue);
	}
	
}

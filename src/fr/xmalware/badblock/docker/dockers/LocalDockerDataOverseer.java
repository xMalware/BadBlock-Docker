package fr.xmalware.badblock.docker.dockers;

import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map.Entry;

import fr.badblock.api.common.utils.logs.LogType;
import fr.xmalware.badblock.docker.instances.InstanceEntity;
import fr.xmalware.badblock.docker.instances.InstanceInfoCache;
import fr.xmalware.badblock.docker.personaldata.IdCard;
import fr.xmalware.badblock.docker.rabbit.RabbitLogger;
import fr.xmalware.badblock.docker.utils.ContainerUtils;

public class LocalDockerDataOverseer extends Thread
{
	
	public LocalDockerDataOverseer()
	{
		super("Docker/LocalDocker/DataOverseer");
		this.start();
	}
	
	@Override
	public void run()
	{
		while (true)
		{
			LocalDocker localDocker = LocalDocker.getInstance();
			LocalDockerData data = localDocker.getData();
			
			Iterator<Entry<String, List<InstanceEntity>>> iterator = data.getEntities().entrySet().iterator();
			List<String> instanceNames = new ArrayList<>();
			while (iterator.hasNext())
			{
				Entry<String, List<InstanceEntity>> systemEntities = iterator.next();
				
				Iterator<InstanceEntity> entityIterator = systemEntities.getValue().iterator();
				while (entityIterator.hasNext())
				{
					InstanceEntity instanceEntity = entityIterator.next();
					
					if (instanceEntity.shouldBeRemoved())
					{
						RabbitLogger.sendDockerLog(LogType.INFO, "Entity " + instanceEntity.getName() + " removed: " + instanceEntity.isBooting());
						entityIterator.remove();
					}
					else
					{
						instanceNames.add(instanceEntity.getName());
					}
				}
			}
			
			IdCard card = Docker.getInstance().getIdCard();
			String redisName = "clusters:" + card.getCluster() + ":" + card.getId();
			Docker.getInstance().getRedis().getJedis().set(redisName, Docker.getInstance().getGsonAccur().toJson(localDocker.getKeepAlive()));
			
			try
			{
				InstanceInfoCache.save(data.getEntities());
			}
			catch (Exception e1)
			{
				e1.printStackTrace();
			}
				
			File folder = new File("servers/");
			
			for (File subFolder : folder.listFiles())
			{
				if (!subFolder.isDirectory())
				{
					continue;
				}
			
				if (!instanceNames.contains(subFolder.getName()))
				{
					ContainerUtils.deleteDirectory(subFolder);
					subFolder.delete();
				}
			}
			
			try
			{
				Thread.sleep(1000L);
			}
			catch (InterruptedException e)
			{
				e.printStackTrace();
			}
		}
	}
	
}
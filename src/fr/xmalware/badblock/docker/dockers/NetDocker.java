package fr.xmalware.badblock.docker.dockers;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;

import fr.badblock.api.common.utils.logs.LogType;
import fr.xmalware.badblock.docker.rabbit.RabbitLogger;
import fr.xmalware.badblock.docker.rabbit.objects.KeepAlive;

public class NetDocker extends Thread
{

	public Map<String, KeepAlive> dockers = new HashMap<>();

	public NetDocker()
	{
		super("Docker/NetDocker/Accuracy");
		this.start();
	}
	
	@Override
	public void run()
	{	
		while (true)
		{
			long time = System.currentTimeMillis();
			
			Iterator<Entry<String, KeepAlive>> iterator = dockers.entrySet().iterator();
			
			while (iterator.hasNext())
			{
				Entry<String, KeepAlive> entry = iterator.next();
				if (entry.getValue().getLifeTime() < time)
				{
					iterator.remove();
					RabbitLogger.sendDockerLog(LogType.ERROR, entry.getValue().getIdCard().getFullId() + " is out dated.");
				}
			}
			
			try
			{
				Thread.sleep(500L);
			}
			catch (InterruptedException e)
			{
				e.printStackTrace();
			}
		}
	}
	
	public void push(KeepAlive keepAlive)
	{
		assert keepAlive != null;
		assert keepAlive.getIdCard() != null;
		
		if (System.currentTimeMillis() > keepAlive.getLifeTime())
		{
			RabbitLogger.sendDockerLog(LogType.WARNING, "Be careful. KeepAlive outdated for " + keepAlive.getIdCard().getFullId());
			return;
		}
		
		String fullId = keepAlive.getIdCard().getFullId();
		if (!dockers.containsKey(fullId))
		{
			RabbitLogger.sendDockerLog(LogType.SUCCESS, keepAlive.getIdCard().getFullId() + " considered as a net docker.");
		}
		
		dockers.put(keepAlive.getIdCard().getFullId(), keepAlive);
	}

	public void kill(String body)
	{
		assert body != null;
		dockers.remove(body);
	}
	
}
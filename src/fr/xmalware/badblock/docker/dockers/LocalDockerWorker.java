package fr.xmalware.badblock.docker.dockers;

import fr.xmalware.badblock.docker.instances.InstanceSystem;
import fr.xmalware.badblock.docker.instances.WorldSystem;
import fr.xmalware.badblock.docker.openers.LocalOpener;

public class LocalDockerWorker extends Thread
{

	public LocalDockerWorker()
	{
		super("Docker/LocalDocker/Worker");
		this.start();
	}

	@Override
	public void run()
	{	
		try
		{
			Thread.sleep(10000L);
		}
		catch (InterruptedException e)
		{
			e.printStackTrace();
		}
		while (true)
		{

			try
			{
				if (LocalDocker.getConfig() == null || LocalDocker.getConfig().getSystems() == null)
				{
					try
					{
						Thread.sleep(500L);
					}
					catch (InterruptedException e)
					{
						e.printStackTrace();
					}
					continue;
				}

				for (InstanceSystem instanceSystem : LocalDocker.getConfig().getSystems().values())
				{
					for (WorldSystem worldSystem : instanceSystem.getWorlds())
					{
						autoCheck(worldSystem);
					}
				}
			}
			catch (Exception error)
			{
				error.printStackTrace();
			}

			try
			{
				Thread.sleep(500L);
			}
			catch (InterruptedException e)
			{
				e.printStackTrace();
			}
		}
	}

	public void autoCheck(WorldSystem worldSystem)
	{
		try
		{
			int max = Math.abs(worldSystem.getSlots() - worldSystem.getMarginSlots());
			long count = worldSystem.getInstances().parallelStream().filter(ent ->
			ent != null &&
			ent.isConsidered(
					worldSystem
					) &&
			ent.getPlayers()
			<
			max).count();

			if (count > worldSystem.getOffsetServers())
			{
				return;
			}

			LocalOpener.open(worldSystem, "automatic", false);
		}
		catch (Exception error)
		{
			error.printStackTrace();
		}
	}

}
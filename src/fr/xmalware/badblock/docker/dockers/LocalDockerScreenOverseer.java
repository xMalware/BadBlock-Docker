package fr.xmalware.badblock.docker.dockers;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map.Entry;

import fr.badblock.api.common.utils.logs.LogType;
import fr.xmalware.badblock.docker.instances.InstanceEntity;
import fr.xmalware.badblock.docker.rabbit.RabbitLogger;
import lombok.Getter;

public class LocalDockerScreenOverseer extends Thread
{

	@Getter
	private static List<String> screenListCache = new ArrayList<>();
	
	public LocalDockerScreenOverseer()
	{
		super("Docker/LocalDocker/ScreenOverseer");
		this.start();
	}

	@Override
	public void run()
	{
		while (true)
		{
			for (String serverName : getScreenList())
			{
				boolean remove = true;

				LocalDocker localDocker = LocalDocker.getInstance();
				LocalDockerData data = localDocker.getData();

				Iterator<Entry<String, List<InstanceEntity>>> iterator = data.getEntities().entrySet().iterator();

				while (iterator.hasNext())
				{
					Entry<String, List<InstanceEntity>> systemEntities = iterator.next();

					Iterator<InstanceEntity> entityIterator = systemEntities.getValue().iterator();
					while (entityIterator.hasNext())
					{
						InstanceEntity instanceEntity = entityIterator.next();

						if (serverName.toLowerCase().equalsIgnoreCase(instanceEntity.getName().toLowerCase()))
						{
							continue;
						}

						if (!instanceEntity.shouldBeRemoved())
						{
							remove = false;
						}
					}
				}

				
			}

			try
			{
				Thread.sleep(1000L);
			}
			catch (InterruptedException e)
			{
				e.printStackTrace();
			}
		}
	}

	@SuppressWarnings("deprecation")
	public static List<String> getScreenList()
	{
		List<String> result = new ArrayList<>();

		String work = "screen -ls";

		try
		{
			Process p = Runtime.getRuntime().exec(work);
			String output = "";
			BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));

			while ((output = reader.readLine()) !=null)
			{
				if (output.contains("_"))
				{
					String[] dotSplitter = output.split("\\.");
					String name = dotSplitter[1];
					String fullName = "";
					
					for (char c : name.toCharArray())
					{
						if (Character.isSpace(c))
						{
							break;
						}
						
						fullName += c;
					}
					
					result.add(fullName);
				}
			}

			reader.close();
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}

		screenListCache = result;
		return result;
	}

}